name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/ml-pipeline-demo

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -m pytest tests/ || echo "No tests found, skipping..."
    
    - name: Test application locally
      run: |
        python train.py
        python -c "
        import subprocess
        import time
        import requests
        
        # Start the Flask app in background
        proc = subprocess.Popen(['python', 'app.py'])
        time.sleep(5)  # Wait for app to start
        
        try:
            # Test health endpoint
            response = requests.get('http://localhost:8080/health')
            assert response.status_code == 200
            print('Health check passed')
        finally:
            proc.terminate()
        "
    
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Trigger OpenShift build
      if: github.ref == 'refs/heads/main'
      run: |
        echo "OpenShift build triggered for main branch"
        # This is where OpenShift webhook calls would be placed in production
        # Example: curl -X POST $OPENSHIFT_WEBHOOK_URL
        # For this tutorial, OpenShift builds are triggered manually